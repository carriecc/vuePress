(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{290:function(t,e,v){"use strict";v.r(e);var r=v(3),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git-使用笔记"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-使用笔记"}},[t._v("#")]),t._v(" Git 使用笔记")]),t._v(" "),v("h2",{attrs:{id:"head"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD^")]),t._v(" "),v("p",[v("code",[t._v("HEAD^")]),t._v("表示当前分支最新一次提交的第一个父节点，是"),v("code",[t._v("HEAD^1")]),t._v("的简写，"),v("code",[t._v("HEAD^2")]),t._v("以此类推。可以到达任何提交的父节点，而不仅仅是"),v("code",[t._v("HEAD")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"git-push"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),v("p",[v("code",[t._v("-u")]),t._v("可以让 git 记住参数，下次推送的时候输入 git push 就可以了。")]),t._v(" "),v("pre",[v("code",[t._v("git push -u <仓库名><分支名>\n")])]),t._v(" "),v("p",[t._v("用于将本地分支的更新，推送到远程主机。")]),t._v(" "),v("pre",[v("code",[t._v("git push <远程主机名> <本地分支名>:<远程分支名>\n")])]),t._v(" "),v("h2",{attrs:{id:"git-log"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),v("pre",[v("code",[t._v("git log <filename>\n")])]),t._v(" "),v("p",[t._v("即可查看文件的修改记录。")]),t._v(" "),v("pre",[v("code",[t._v("git log --grep=msg\n")])]),t._v(" "),v("p",[t._v("查找含有 msg 关键字的 commit。")]),t._v(" "),v("h2",{attrs:{id:"git-branch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),v("p",[t._v("列出所有远程分支")]),t._v(" "),v("pre",[v("code",[t._v("git branch -r\n")])]),t._v(" "),v("p",[t._v("列出所有分支，包括本地和远程")]),t._v(" "),v("pre",[v("code",[t._v("git branch -a\n")])]),t._v(" "),v("p",[t._v("新建一个本地分支并跟远程分支联系起来")]),t._v(" "),v("pre",[v("code",[t._v("git checkout -b LocalName origin/remotebranchname\n")])]),t._v(" "),v("p",[t._v("删除远程分支")]),t._v(" "),v("pre",[v("code",[t._v("git push origin --delete remotebranchname\n")])]),t._v(" "),v("h2",{attrs:{id:"git-merge"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),v("ol",[v("li",[t._v("确认 HEAD 当前指向要接收合并的分支，"),v("code",[t._v("git checkout master")]),t._v("。")]),t._v(" "),v("li",[t._v("确认接收分支跟合并分支是最新的。")]),t._v(" "),v("li",[v("code",[t._v("git merge <branch name>")]),t._v("，")])]),t._v(" "),v("p",[t._v("git merge <分支名>：回到 master 分支后执行此命令，将分支合并到 master 上。")]),t._v(" "),v("h2",{attrs:{id:"git-diff"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),v("p",[t._v("Git 导出某两次提交之间的差异文件:")]),t._v(" "),v("pre",[v("code",[t._v("git diff v${old_version} v${new_version} > ../${gitlab_version}.diff\n")])]),t._v(" "),v("p",[t._v("查看工作环境与暂存区的差异")]),t._v(" "),v("pre",[v("code",[t._v("git diff\n")])]),t._v(" "),v("p",[t._v("暂存区域与你最后提交之间的差异")]),t._v(" "),v("pre",[v("code",[t._v("git diff --staged\n")])]),t._v(" "),v("p",[t._v("比较与最近一次提交的差异")]),t._v(" "),v("pre",[v("code",[t._v("git diff HEAD\n")])]),t._v(" "),v("p",[t._v("对比两个分支的差异部分")]),t._v(" "),v("pre",[v("code",[t._v("git diff branch1 branch2 --stat\n")])]),t._v(" "),v("h2",{attrs:{id:"git-reset"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),v("p",[t._v("本地有修改和提交，如何强制用远程的库更新(这样操作，之前所做的修改会被覆盖！！！谨慎使用！):")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("git fetch --all\ngit reset --hard origin/master(根据本地版本)\n")])])]),v("h2",{attrs:{id:"git-checkout"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("git checkout <sha1-of-a-commit> </path/to/your/file>: \n")])])]),v("p",[t._v("将文件恢复到某次提交的状态。")]),t._v(" "),v("h2",{attrs:{id:"git-stash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),v("p",[t._v("即将更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。")]),t._v(" "),v("ol",[v("li",[t._v("先将本地修改存储起来\n"),v("code",[t._v("git stash")])]),t._v(" "),v("li",[t._v("pull内容\n"),v("code",[t._v("git pull")])]),t._v(" "),v("li",[t._v("还原暂存的内容\n"),v("code",[t._v("git stash pop stash@{0}")])]),t._v(" "),v("li",[t._v("解决文件中冲突的的部分")])]),t._v(" "),v("h2",{attrs:{id:"git-config"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),v("p",[t._v("列出所有 Git 当时能找到的配置.")]),t._v(" "),v("pre",[v("code",[t._v("git config --list\n")])]),t._v(" "),v("p",[t._v("检查 Git 的某一项配置")]),t._v(" "),v("pre",[v("code",[t._v("git config user.name\n")])]),t._v(" "),v("p",[t._v("配置用户信息")]),t._v(" "),v("pre",[v("code",[t._v('git config --global user.name "John Doe"\ngit config --global user.email johndoe@example.com\n')])]),t._v(" "),v("h2",{attrs:{id:"撤回多个提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#撤回多个提交"}},[t._v("#")]),t._v(" 撤回多个提交")]),t._v(" "),v("p",[t._v("假设提交历史如下：")]),t._v(" "),v("pre",[v("code",[t._v("G1 - G2 - G3 - B1 - B2 - B3\n")])]),t._v(" "),v("p",[t._v("其中 G1 - G3 都是“好”的提交而 B1 -B3 是坏的提交，需要撤回。")]),t._v(" "),v("h3",{attrs:{id:"git-reset-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-2"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),v("p",[t._v("第一个方法是回退提交，会重写提交历史，因此只有当提交还没有提交到服务器端的时候使用这个方法。"),v("code",[t._v("--hard")]),t._v("标志位会清空所有未提交的暂存。")]),t._v(" "),v("pre",[v("code",[t._v("$ git reset --hard HEAD~3  # Careful, will remove not-commited changes\n")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("G1 - G2 - G3 - B1 - B2 - B3\n           \\    \\    \\    \\-- HEAD\n            \\    \\    \\------ HEAD~1\n             \\    \\---------- HEAD~2\n              \\-------------- HEAD~3\n")])])]),v("h3",{attrs:{id:"git-revert"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),v("p",[t._v("如果修改已经推送到服务器端或者不想改变提交记录，最好是用"),v("code",[t._v("revert")]),t._v("。")]),t._v(" "),v("p",[v("code",[t._v("revert")]),t._v("命令拿到这些提交的 SHA1 并生成新的修改来撤回这些提交。")]),t._v(" "),v("pre",[v("code",[t._v("$ git revert --no-commit HEAD~2^..HEAD\n")])]),t._v(" "),v("p",[t._v("或者：")]),t._v(" "),v("pre",[v("code",[t._v("$ git revert --no-commit HEAD~3..HEAD\n")])]),t._v(" "),v("p",[t._v("由于需要撤回 B1 - B3。两个点"),v("code",[t._v("<rev1>..<rev2>")]),t._v("表示"),v("code",[t._v("(<rev1>, <rev2>]")]),t._v("间的提交。"),v("code",[t._v("--no-comit")]),t._v("表示让 git 撤回，但不要自动提交。最后得到了这样的提交历史：")]),t._v(" "),v("pre",[v("code",[t._v("G1 - G2 - G3 - B1 - B2 - B3 - R`\n")])]),t._v(" "),v("p",[t._v("其中``R"),v("code",[t._v("就是一个撤回提交会让仓库状态回退到")]),t._v("G3`。也可以由新到旧逐个指定提交：")]),t._v(" "),v("pre",[v("code",[t._v("$ git revert --no-commit HEAD HEAD~1 HEAD~2\n")])]),t._v(" "),v("h3",{attrs:{id:"回退到某个版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#回退到某个版本"}},[t._v("#")]),t._v(" 回退到某个版本")]),t._v(" "),v("p",[t._v("有时候只需要将仓库回退到某个版本而不需要逐个撤回。这对于想要撤回之前的合并点非常有用，因为用"),v("code",[t._v("git revert")]),t._v("需要指定 parent，会比较难做到，通常会看到"),v("code",[t._v("Commit XXX is a merge but no -m option was given.")]),t._v("的报错。")]),t._v(" "),v("p",[t._v("因此应该使用"),v("code",[t._v("git reset")]),t._v("。首先先硬复位到某个版本然后在软复位到当前状态。软复位会保留文件修改，因此它会将旧的状态带到当前状态：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('# Careful, reset --hard will remove non-commited changes\n$ git reset --hard 0682c06  # Use the SHA1 of the revision you want to revert to\nHEAD is now at 0682c06 G3\n$ git reset --soft HEAD@{1}\n$ git commit -m "Reverting to the state of the project at 0682c06"\n')])])]),v("p",[t._v("也可以用"),v("code",[t._v("git read-tree")]),t._v("的方法：")]),t._v(" "),v("pre",[v("code",[t._v("git read-tree -um @ 0682c06  # Use the SHA1 of the revision you want to revert \n")])]),t._v(" "),v("p",[v("code",[t._v("-m")]),t._v("选项让"),v("code",[t._v("read-tree")]),t._v("合并指定状态而"),v("code",[t._v("-u")]),t._v("会用合并后的结果更新工作树")]),t._v(" "),v("p",[t._v("git fetch 下载远程的库的内容，不做任何的合并，git reset 把HEAD指向刚刚下载的最新的版本。")]),t._v(" "),v("p",[t._v("文件名应避免空格，否则使用 git rm 的时候要用双引号把文件名括起来（其中一种方法）。")]),t._v(" "),v("h2",{attrs:{id:"git-remote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),v("p",[t._v("显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL")]),t._v(" "),v("pre",[v("code",[t._v("git remote -v\n")])]),t._v(" "),v("p",[t._v("添加远程仓库")]),t._v(" "),v("pre",[v("code",[t._v("git remote add <shortname> <url>")])])])}),[],!1,null,null,null);e.default=_.exports}}]);